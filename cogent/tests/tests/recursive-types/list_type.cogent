-- Tests recursive types

type List a          = rec t { l: < Nil | Cons (a,t) > }
type EmptyListNode a = (List a) take (..)

allocListNode : all a. () -> EmptyListNode a
freeListNode : all a. EmptyListNode a -> ()
freeList : all a. List a -> ()

cons : all a. (a, List a) -> List a
cons (x, list) = (allocListNode ()) { l = Cons (x,list) }

append : all a. (List a, List a) -> List a
append (head { l = x }, b) =
  x | Nil -> 
        let _ = freeListNode head in b
    | Cons (elem, tail) -> 
        let rest = append (tail, b)
        in head { l = Cons (elem, rest) }