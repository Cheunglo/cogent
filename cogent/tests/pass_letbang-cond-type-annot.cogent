--
-- Copyright 2018, Data61
-- Commonwealth Scientific and Industrial Research Organisation (CSIRO)
-- ABN 41 687 119 230.
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(DATA61_GPL)
--

type B
type A = { a : U8, b : B }

foo : A -> < Fail (U32, { a : U8, b : B }, U32, U16) 
             | Success { a : U8, b : B } >
foo x =
   let x' { b = bv } = x
   in let x = x' { b = bv }
      in ((x.a == 2
         | True  -> Success ()
         | False -> Fail 42) : <Success ()|Fail U32>) !x
          --^^^ The outermost () are necessary, otherwise it will parse it
          --    as annotating type (<Success()|Fail U32>!) and applying it
          --    to x, which is totally different.
          --    The type annotation can either be on the hole expression,
          --    or on any individual alternative.
           | Success () -> Success x
           | Fail   err -> Fail (err, x, 2, 1)

bar : A -> < Fail (U32, A) | Success (A) >
bar x =
   Success ((x.a == 2
   | True  -> let a : <Success () | Fail U8> = Success () in a
   | False -> Fail 42) !x
     | Success () -> x
     | Fail   err -> x)
