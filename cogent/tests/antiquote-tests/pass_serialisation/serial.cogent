--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

include <gum/common/wordarray.cogent>
include <gum/common/buffer.cogent>
include <gum/common/common.cogent>

const_arraySize: U32
const_arraySize = 4

u64_to_u8: U64 -> U8

setu8:  #{elem: U8, acc: (), obsv: U8! } -> #{elem: U8, acc: () }
setu8 #{elem=_, acc, obsv=elem} = #{elem,acc}

serialise_u8: (Buffer, BufOffs, U8) -> Buffer
serialise_u8(buf {bound,data}, offs, val) =
  let #{arr=data, acc=_} = wordarray_modify[U8,(),U8] #{arr=data, idx=offs, f=setu8, acc=(), obsv=val}
  in buf {bound,data}

serialise_le64: (Buffer, BufOffs, U64) -> Buffer
serialise_le64(buf, offs, val) =
  let buf = serialise_u8(buf, offs, u64_to_u8(val))
  and buf = serialise_u8(buf, offs+1, u64_to_u8(val >> 8))
  and buf = serialise_u8(buf, offs+2, u64_to_u8(val >> 16))
  and buf = serialise_u8(buf, offs+3, u64_to_u8(val >> 24))
  and buf = serialise_u8(buf, offs+4, u64_to_u8(val >> 32))
  and buf = serialise_u8(buf, offs+5, u64_to_u8(val >> 40))
  and buf = serialise_u8(buf, offs+6, u64_to_u8(val >> 48))
  in        serialise_u8(buf, offs+7, u64_to_u8(val >> 56))

deserialise_le64: (Buffer!, BufOffs) -> U64
deserialise_le64(buf, offs) =
  let b0 = wordarray_get[U8] (buf.data, offs)
  and b1 = wordarray_get[U8] (buf.data, offs + 1)
  and b2 = wordarray_get[U8] (buf.data, offs + 2)
  and b3 = wordarray_get[U8] (buf.data, offs + 3)
  and b4 = wordarray_get[U8] (buf.data, offs + 4)
  and b5 = wordarray_get[U8] (buf.data, offs + 5)
  and b6 = wordarray_get[U8] (buf.data, offs + 6)
  and b7 = wordarray_get[U8] (buf.data, offs + 7)
  in ((u8_to_u64(b7) << 56) .|. (u8_to_u64(b6) << 48) .|.
      (u8_to_u64(b5) << 40) .|. (u8_to_u64(b4) << 32) .|.
      (u8_to_u64(b3) << 24) .|. (u8_to_u64(b2) << 16) .|.
      (u8_to_u64(b1) << 8) .|. u8_to_u64(b0))

val: U64
val = 0x11223344aabbccdd
caller: (SysState) -> (SysState)
caller (h) =
    -- make it
    buf_create (h, 42)
    | Error h ->
      _cogent_debug "cannot allocate buf" ;
      h
    | Success (h, buf) ->
        -- put 42 in first index
       let  buf = serialise_le64(buf, 0, val)
       and  val' = deserialise_le64(buf, 0) !buf
--       and _ = _cogent_debug ("value was: ")
--       and _ = _cogent_debug_u64_hex (val')
--       and _ = _cogent_debug ("\n")
       and h = buf_free (h, buf)
       in if val /= val' then
         _cogent_debug "Error\n" ;
         h
       else
         _cogent_debug "OK\n" ;
         h

