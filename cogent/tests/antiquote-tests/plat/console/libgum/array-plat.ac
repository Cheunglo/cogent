/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$ty:(R (ExState, Array a) ExState) $id:array_create($ty:((ExState, U32)) args)
{
	$ty:(R ((ExState, Array a)) ExState) ret;
	u32 len = args.p2;

	// this assignment is here for type inference to work
	// TODO: probably come up with a way around this...
    /* FIXME Why do we have this crap in antiquotation? */
	$ty:(Array a) array = ret.Success.p2;
	array = malloc (sizeof (*array));

	if (array == NULL) {
		ret.tag = TAG_ENUM_Error;
		ret.Error = args.p1;
	} else {
		array->len = len;
		array->values = calloc (len, sizeof (*(array->values)));
		if (array->values == NULL) {
			free (array);
			ret.tag = TAG_ENUM_Error;
			ret.Error = args.p1;
		} else {
			ret.tag = TAG_ENUM_Success;
			ret.Success.p2 = array;
			ret.Success.p1 = args.p1;
		}
	}

	return ret;
}

$ty:(ExState) $id:array_free($ty:(ArrayFreeP a) args)
{
	$ty:(Array a) array = args.arr;
	u32 i;

	$ty:(FreeF a) freeFunc = args.f;
	$ty:(ExState) h = args.ex; // FIXME: should work with explicit Heap*

	// loop over each element, and free it
	if (array->values) {
		for (i = 0; i < array->len; i++) {
			if (array->values[i] != NULL) {
				// note: we use a tuple here
				$ty:((ExState, a)) heap_array = {.p1 = h, .p2 = array->values[i]};
				h = (($spec:(FreeF a))freeFunc) (heap_array);
			}
		}

		free (array->values);
	}
	
	free (array);

	return h;
}
