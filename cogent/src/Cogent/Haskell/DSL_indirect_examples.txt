-- list paired with length of that list
-- abstracted into just the list
absf: indirect
    IC: (Int, [Int])
    IA: [Int]
        [Int]: () 1

--      ^^ this can also be written as: []: () 1

-- list paired with length of that list
-- abstracted into just the list length
absf: indirect
    IC: (Int, [Int])
    IA: Int
        Int: sum () 1

absf: indirect
    IC: Bag Int Int
    IA: Int
        Int: div () 0 () 1

--      ^^ this can also be written as: 0: () 0

-- list of tuple pairs to Map 
absf: indirect
    IC: [(Int, Int)]
    IA: Map Int Int 
        Map 0: [] () 1
        Map 1: [] () 0

-- Perhaps, dot syntax for accessing Constructor inhabitants 
absf: indirect
    IC: [(Int, Int)]
    IA: Map Int Int 
        Map.0: [].().1
        Map.1: [].().0

-- Variants
absf: direct, drop 0
    IC: <Failure Int | Success Int>
    IA: Maybe Int 

absf: indirect
    IC: (Bag Int Int, Bag Int Int)
    IA: (Map Int Int, Map Int Int)
        () 1: 
            Map 0: () 0 Bag 0
            Map 1: () 0 Bag 1
        () 0:     
            Map 0: () 1 Bag 1
            Map 1: () 1 Bag 0
