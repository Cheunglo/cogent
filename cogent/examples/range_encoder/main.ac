/*
 * Copyright 2017, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$esc:(#include <stdio.h>)
$esc:(#include <stdlib.h>)

typedef void* SysState;

#include "generated.c"
#include <gum/anti/common.ac>
#include <gum/anti/wordarray.ac>

$ty:((U8, (U64, U64))) $id:decode_letter($ty:(ElemAO U8 (U64, U64)
	(WordArray U32, WordArray U32, U64)) args) {
	$ty:((U8, (U64, U64))) ret;
	int e = args.obsv.p1->len;
	ret.p1 = e;
	ret.p2.p1 = args.acc.p1;
	ret.p2.p2 = args.acc.p2;
	$ty:(U64) ttl = args.obsv.p1->values[e-1] + args.obsv.p2->values[e-1];
	for (int i = 0; i < e; i++) {
		$ty:(U64) f = args.obsv.p1->values[i];
		$ty:(U64) c = args.obsv.p2->values[i];
		$ty:(U64) l = (args.acc.p2 * c) / ttl;
		$ty:(U64) w = (args.acc.p2 * f) / ttl;
		if (args.acc.p1 + l <= args.obsv.p3 && 
			args.obsv.p3 < args.acc.p1 + l + w) {
			ret.p1 = ($ty:(U8))i;
			ret.p2.p1 = args.acc.p1 + l;
			ret.p2.p2 = w;
			break;
		}
	}
	return ret;

}


int main(int argc, char* argv[]) {
	$ty:(U32) freq[4] = {10, 21, 27, 42};
	$ty:(#(WordArray U32)) wa_freq = { .len = 4, 
		.values = ($ty:(U32)*)(&freq) };
	$ty:(U32) cum[4] = {0, 10, 31, 58};
	$ty:(#(WordArray U32)) wa_cum = { .len = 4,
		.values = ($ty:(U32)*)(&cum) };
	$ty:(U8) msg[11] = {3, 2, 1, 3, 3, 3, 0, 0, 3, 2, 1};
	$ty:(#(WordArray U8)) wa_msg = { .len = 11,
		.values = ($ty:(U8)*)(&msg) };

	$ty:(((WordArray U32)!, (WordArray U32)!, (WordArray U8)!, U64)) args1 =
		{ .p1 = &wa_freq, .p2 = &wa_cum, .p3 = &wa_msg, .p4 = (1UL << 32) - 1 };

	$ty:(U64) code = $exp:(static_encode)(args1);

	printf("%lu\n", code);

	$ty:(((WordArray U32)!, (WordArray U32)!, (WordArray U8), U64, U64)) args2 =
		{ .p1 = &wa_freq, .p2 = &wa_cum, .p3 = &wa_msg, .p4 = code,
			.p5 = (1UL << 32) - 1 };
	
	$ty:(WordArray U8) wa_ret = $exp:(static_decode)(args2);
	printf("{ ");
	for (int i = 0; i < wa_ret->len; i++) {
		printf("%u, ", wa_ret->values[i]);
	}
	printf("}\n");
	return EXIT_SUCCESS;
}
