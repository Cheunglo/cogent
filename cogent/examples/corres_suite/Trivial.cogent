-- Core expressions:
-- Tested (somewhat):
--    Var, Fun, App, Cast, Let, Con, Case, Esac, Promote
--    Struct, Take unboxed,
--    Unit
--    AFun
--    Lit (U8)
--
-- Not tested:
--    Letbang, If, Prim
--    Member, Put boxed, Put unboxed, Take boxed,
--
-- Not applicable, as not used by compiler?
--    Tuple, Split
--
-- Not applicable, as not supported by C parser:
--    SLit (string literal)

id : U8 -> U8
id x = x

con_fun_call : U8 -> U8
con_fun_call x = id x


cast_u8_16 : U8 -> U16
cast_u8_16 x = upcast x


cast_u8_16_id : U8 -> U16
cast_u8_16_id x = upcast (id x)


con_record : {field : U8} -> {field : U8}
con_record x = x


con_variant : U8 -> < Success (U8) >
con_variant x = Success x


con_variant_2opt : U8 -> < Success (U8) | Error () >
con_variant_2opt x = Success x


con_variant_nested : U8 -> < Colour < Red U8 | Green U8 | Blue U8 > >
con_variant_nested x = Colour (Red x)


con_case : U8 -> U8
con_case x =
  con_variant_2opt x
  | Success _ -> x
  | _ -> x

con_esac : U8 -> U8
con_esac x =
  con_variant x
  | Success _ -> x


-- this is actually a 'Struct'
con_struct_tuple : U8 -> (U8, U8)
con_struct_tuple x = (x,x)

-- this is 'Take'
con_take_tup : (U8,U8) -> U8
con_take_tup (x,y) = x + y


con_unit : () -> ()
con_unit () = ()


con_afun_ffi : U8 -> U8

con_afun_call : U8 -> U8
con_afun_call x = con_afun_ffi x


con_lit_u8 : () -> U8
con_lit_u8 _ = 10

