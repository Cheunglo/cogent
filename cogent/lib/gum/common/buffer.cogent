--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

-- The current trend of thoughts seems to indicate that
-- Buffers should not be an ADT but instead they shold be
-- implmemented in COGENT using the WordArray U8 ADT.
-- ADT or not Buffers interface should comply with these prototypes:

include "wordarray.cogent"

-- BufOffs is used to specify the offset within a Buffer
-- Should be used by functions that manipulate Buffers including
-- serialisation ones.
type BufOffs = U32

type Buffer = {
    length : U32,
 -- @length is the allocated length of the @data
    bound : BufOffs,
 -- @bound is used to virtually resize the buffer when
 -- using serialisation functions. It allows allocating
 -- one large buffer that can be reused across FS operation
 -- for instance. It counts from the beginning of @data
    data : U8#[0]
}
{-
    wellformed_buf: wordarray_length buf.data >= buf.bound
-}

{-# cinline newBuffer #-}
newBuffer : (SysState, U32) -> R (SysState, Buffer) SysState

{-# cinline freeBuffer #-}
freeBuffer : (SysState, Buffer) -> SysState

{-# cinline buf_set_bound #-}
buf_set_bound: (Buffer, BufOffs) -> R Buffer Buffer
buf_set_bound (buf, newbound) =
    if newbound > buf.length !buf then
      Error buf
    else
      Success (buf {bound=newbound})

{-# cinline buf_memset #-}
buf_memset: (Buffer, U32, U32, U8) -> Buffer

-- if the offset is out-of-bounds, return 0
buf_get : (Buffer!, BufOffs) -> U8

buf_set : (Buffer, BufOffs, U8) -> Buffer
