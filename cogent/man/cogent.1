.\" Manpage for Cogent.
.TH man 1 "15 October 2016" "2.0.6" "Cogent man page"
.SH NAME
cogent -\ a compiler for building high-assurance file-systems.
.SH SYNOPSIS
cogent OPTIONS [FLAGS] FILE
.SH DESCRIPTION
Cogent compiler takes a set of compatible options (actions), with a list of optional flags and an input file.
It is used to compile Cogent source code and generate C code, plus Isabelle/HOL specifications and proofs to
show that the generated C code has the same semantics as the source program (and its shallow HOL embedding).
Cogent compiler comes with an FFI to interact with existing C code. The user needs to write a thin wrapper
in C, with antiquoted Cogent identifiers, in order to access Cogent functions and datatypes. 
.SH OPTIONS
  -u[FILE]                      --stack-usage[=FILE]             parse stack usage .su file generated by gcc
                                --disassemble                    disassemble obj file
                                --parse                          parse Cogent source code
  -t                            --typecheck                      typecheck surface program
                                --desugar                        desugar surface program and re-type it
                                --normal                         normalise core language and re-type it
                                --simplify                       simplify core language and re-type it
                                --mono                           monomorphise core language and re-type it
  -g                            --code-gen                       generate C code
                                --ast-parse                      display core langauge AST (surface language)
                                --ast-tc                         display core langauge AST (type-checked)
                                --ast-desugar                    display core langauge AST (desugared)
                                --ast-normal                     display core langauge AST (normalised)
                                --ast-simpl                      display core langauge AST (simplified)
                                --ast-mono                       display core langauge AST (monomorphised)
  -p                            --pretty-parse                   pretty-print core language (surface language)
  -c                            --pretty-desugar                 pretty-print core language (desugared)
  -n                            --pretty-normal                  pretty-print core language (normalised)
                                --pretty-simpl                   pretty-print core language (simplified)
                                --pretty-mono                    pretty-print core language (monomorphised)
  -D                            --deep-desugar                   generate Isabelle deep embedding (desugared)
  -N                            --deep-normal                    generate Isabelle deep embedding (normalised)
  -M                            --deep-mono                      generate Isabelle deep embedding (monomorphised)
  -d                            --shallow-desugar                generate Isabelle shallow embedding (desugared)
  -n                            --shallow-normal                 generate Isabelle shallow embedding (normalised)
  -m                            --shallow-mono                   generate Isabelle shallow embedding (monomorphised)
  -d                            --shallow-desugar-tuples         generate Isabelle shallow embedding (desugared, with HOL tuples)
                                --scorres-desugar                generate scorres (desugared)
                                --scorres-normal                 generate scorres (normalised)
                                --scorres-mono                   generate scorres (monomorphised)
                                --embedding-desugar              implies --deep-desugar --shallow-desugar --scorres-desugar --shallow-funcs-desugar
                                --embedding-normal               implies --deep-normal --shallow-normal --scorres-normal --shallow-funcs-normal
                                --embedding-mono                 implies --deep-mono --shallow-mono --scorres-mono --shallow-funcs-mono
                                --shallow-consts-desugar         generate constant definitions for shallow embedding (desugared)
                                --shallow-consts-normal          generate constant definitions for shallow embedding (normalised)
                                --shallow-consts-mono            generate constant definitions for shallow embedding (monomorphised)
                                --shallow-consts-desugar-tuples  generate constant definitions for shallow embedding (desugared, with HOL tuples)
                                --shallow-tuples-proof           generate proof for shallow tuples embedding
                                --normal-proof                   generate Isabelle proof of normalisation
                                --mono-proof                     generate monomorphisation proof
                                --ac-install                     generate an Isabelle theory to install AutoCorres
                                --corres-setup                   generate Isabelle lemmas for c-refinement
                                --corres-proof                   generate Isabelle proof of c-refinement
  -r                            --c-refinement                   implies --ac-install --corres-setup --corres-proof
                                --type-proof-normal              generate Isabelle proof of type correctness of normalised AST
  -P                            --type-proof                     generate Isabelle proof of type correctness of normal-mono AST
                                --root                           generate Isabelle ROOT file
                                --table-c-types                  generate a table of Cogent and C type correspondence
                                --table-shallow                  generate a table of type synonyms for shallow embedding
                                --table-abs-func-mono            generate a table of monomorphised abstract functions
                                --table-abs-type-mono            generate a table of monomorphised abstract types
  -G                            --graph-gen                      generate graph for graph-refine
                                --build-info                     generate BUILD_INFO file
                                --all-refine                     generate shallow-to-C refinement proof
  -A                            --all                            generate everything
  -h[VERBOSITY], -?[VERBOSITY]  --help[=VERBOSITY]               display help message (VERBOSITY=0..4, default to 1)
  -v, -V                        --version                        show version number

.SH FLAGS
  -o NAME    --output-name=NAME                specify base name for output files (default is derived from source Cogent file)
  -y NAME    --proof-name=NAME                 specify base name for theory files (default is derived from source Cogent file)
             --abs-type-dir=PATH               abstract type definitions will be in $DIR/abstract/, which must exist (default=./)
             --dist-dir=PATH                   specify path to all output files (default=./)
             --fake-header-dir=PATH            specify path to fake c header files
             --root-dir=PATH                   specify path to top-level directory (for imports in theory files only, default=./)
             --entry-funcs=FILE                give a list of Cogent functions that are only called from outside
             --ext-types=FILE                  give external type names to C parser
             --infer-c-funcs=FILE..            infer Cogent abstract function definitions
             --infer-c-types=FILE..            infer Cogent abstract type definitions
             --proof-input-c=FILE              specify input C file to generate proofs (default to the same base name as input Cogent file)
             --cpp=PROG                        set which C-preprocessor to use (default to cpp)
             --cpp-args=ARG..                  arguments given to C-preprocessor (default to $CPPIN -E -P -o $CPPOUT)
             --fcheck-undefined                (default) check for undefined behaviours in C
             --fflatten-nestings               flatten out nested structs in C code (does nothing)
             --ffncall-as-macro                generate macros instead of real function calls
             --ffunc-purity-attr               (default) generate GCC attributes to classify purity of Cogent functions
             --fgen-header                     generate build info header in all output files, reverse of --fno-gen-header
             --fintermediate-vars              (default) generate intermediate variables for Cogent expressions
             --flet-in-if                      (default) put binding of a let inside an if-clause
             --fletbang-in-if                  (default) put binding of a let! inside an if-clause
             --fml-typing-tree                 (default) generate ML typing tree in type proofs
             --fnormalisation[=NF]             (default) normalise the core language (NF=anf[default], knf, lnf)
             --fno-check-undefined             reverse of --fcheck-undefined
             --fno-flatten-nestings            (default) reverse of --fflatten-nestings
             --fno-fncall-as-macro             (default) reverse of --ffncall-as-macro
             --fno-func-purity-attr            reverse of --ffunc-purity-attr
             --fno-gen-header                  (default) don't generate build info header in any output files
             --fno-intermediate-vars           reverse of --fintermediate-vars
             --fno-let-in-if                   reverse of --flet-in-if
             --fno-letbang-in-if               reverse of --fletbang-in-if
             --fno-ml-typing-tree              reverse of --fml-typing-tree
             --fno-normalisation               reverse of --fnormalisation
             --fno-pragmas                     reverse of --fpragmas
             --fno-pretty-errmsgs              reverse of --fpretty-errmsgs
             --fno-reverse-tc-errors           (default) reverse of --freverse-tc-errors
             --fno-share-linear-vars           (default) reverse of --fshare-linear-vars
             --fno-share-variants              (default) reverse of --fshare-variants (does not work)
             --fno-simplifier                  (default) reverse of --fsimplifier
             --fno-static-inline               reverse of --fstatic-inline
             --fno-tp-with-bodies              reverse of --ftp-with-bodies
             --fno-tp-with-decls               reverse of --ftp-with-decls
             --fno-tuples-as-sugar             reverse of --ftuples-as-sugar
             --fno-union-for-variants          (default) reverse of --funion-for-variants
             --fno-untyped-func-enum           reverse of --funtyped-func-enum
             --fno-use-compound-literals       reverse of --fuse-compound-literals, it instead creates new variables
             --fno-wrap-put-in-let             (default) reverse of --fwrap-put-in-let
             --fpragmas                        (default) preprocess pragmas
             --fpretty-errmsgs                 (default) pretty-print error messages (requires ANSI support)
             --freverse-tc-errors              Print type errors in reverse order
             --fshare-linear-vars              reuse C variables for linear objects
             --fshare-variants                 use the largest variant type for the smaller ones in each case chain (does nothing)
             --fsimplifier                     enable simplifier on core language
             --fsimplifier-level=NUMBER        number of iterations simplifier does (default=4)
             --fstatic-inline                  (default) generate static-inlined functions in C
             --ftuples-as-sugar                (default) treat tuples as syntactic sugar to unboxed records, which gives better performance
             --ftc-ctx-len=NUMBER              set the depth for printing error context in typechecker (default=3)
             --ftp-with-bodies                 (default) generate type proof with bodies
             --ftp-with-decls                  (default) generate type proof with declarations
             --funion-for-variants             use union types for variants in C code (cannot be verified)
             --funtyped-func-enum              (default) use untyped function enum type
             --fuse-compound-literals          (default) use compound literals when possible in C code
             --fwrap-put-in-let                Put always appears in a Let-binding when normalised
  -O[LEVEL]  --optimisation[=LEVEL]            set optimisation level (0, 1, 2, d, n, s, u or v; default -Od)
             --Wall                            issue all warnings
  -E         --Werror                          make any warning into a fatal error
             --Wdynamic-variant-promotion      enable warning on dynamic variant type promotion
             --Wimplicit-int-lit-promotion     (default) enable warning on implicit integer literal promotion
             --Wno-dynamic-variant-promotion   (default) reverse of --Wdynamic-variant-promotion
             --Wno-implicit-int-lit-promotion  reverse of --Wimplicit-int-lit-promotion
  -w         --Wno-warn                        turn off all warnings
             --Wwarn                           (default) warnings are treated only as warnings, not as errors
  -q         --quiet                           do not display compilation progress
             --debug                           switch Cogent compiler to debugging mode
  -x         --fdump-to-stdout                 dump all output to stdout
  -i         --interactive                     interactive compiler mode

.SH RESOURCES

* https://ts.data61.csiro.au/projects/TS/cogent.pml

* Source code available at https://github.com/NICTA/cogent

.SH AUTHOR
Trustworthy Systems, Data61
