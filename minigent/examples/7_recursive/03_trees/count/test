quicksort n = 
  case n.list.l of
    Nil u -> Nil Unit
    | n1 ->
    case n1 of
      Cons input ->
      let lt = filter {p = input.p, b = True, list = input.rest} in
        let gt = filter {p = input.p, b = False, list = input.rest} in
          let leftQS =
            case lt.l of
              Nil u -> Nil Unit
              | x -> 
                case x of 
                  Cons x1 ->
                    quicksort {p = x1.data, list = x1.rest}
                end
            end
          in
            let rightQS = 
              case gt.l of
                Nil u -> Nil Unit
                | y -> 
                  case y of
                    Cons y1 -> 
                      quicksort {p = y1.data, list = y1.rest}
                  end
              end
            in
              let pivot = alloc Unit in 
                let pivot1 = 
                  put pivot.l := 
                    Cons {
                      data = n.p,
                      rest = Nil Unit
                    } end
                in
                  let leftResult = concat {left = leftQS, right = pivot1} in
                    concat {left = leftResult, right = rightQS}
                  end
                end
              end
            end
          end
        end
      end
    end
  end;


  quicksort n = 
  case n.list.l of
    Nil u -> Nil Unit
    | n1 ->
    case n1 of
      Cons input ->
        let lt = filter {p = input.p, b = True, list = input.rest} in
          let gt = filter {p = input.p, b = False, list = input.rest} in
            concat {left = lt, right = gt}
          end
        end
    end
  end;