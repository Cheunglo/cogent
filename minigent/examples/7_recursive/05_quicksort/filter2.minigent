alloc : Unit -> rec t { l: < Nil Unit | Cons { data: U32, rest: t! }# > take }!;

filter : {p: U32->Bool, list: rec t { l: < Nil Unit | Cons { data: U32, rest: t! }# >}!}# 
  -> rec t { l: < Nil Unit | Cons { data: U32, rest: t! }# >}!;

filter n =
  case n.list.l of
    Nil u -> n.list
    | x -> 
      case x of 
        Cons y -> 
          let result = filter { p = n.p, list = y.rest} in
            let pred = n.p y.data in
              if (pred) then
                let item = alloc Unit in
                  let item1 = 
                    put item.l := 
                      Cons {
                        data = y.data,
                        rest = result
                      } end
                  in
                    item1
                  end
                end
              else
                result
              end
            end
          end
      end
  end;