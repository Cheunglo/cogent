alloc : Unit -> rec t { l: < Nil Unit | Cons { data: U32, rest: t }# > take };
dealloc : rec t { l: < Nil Unit | Cons { data: U32, rest: t }# > take } -> Unit;

ruinList : rec t { l: < Nil Unit | Cons { data: U32, rest: t }# >} -> Unit;

ruinList r = 
  case r.l of
    Nil u -> Unit
    | r2 ->
      case r2 of 
        Cons list ->
          let x = dealloc r in
            if list.data == 0 then
                ruinList list.rest
            else
              let newNode = alloc Unit 
              in
                let newList = 
                  put newNode.l := 
                    Cons {
                      data = 0, 
                      rest = list.rest
                    } end
                in
                  ruinList newList
                end
              end
            end
          end
      end
  end;
