allowed : { foo : { bar : U8 , foo : U8 }#, baz : U8 } 
      -> { foo : { bar : U8 , foo : U8 }# take, baz : U8};
allowed r = take s { foo = x } = r 
             in put s.baz := x.bar + x.foo end
            end;
                  
bad : [x]. { foo : Unit -> x, baz : x } 
        -> { foo : Unit -> x take, baz : x};
bad r = take s { foo = f } = r 
        in put s.baz := f Unit end
        end;

simple : { foo : {bar : U8 , foo : U8 }#, baz : U8 }#
      -> { foo : {bar : U8 take , foo : U8 take }#, baz : U8 take }#;
simple blah = blah;
                  
simpleWrong : { foo : {bar : U8 take , foo : U8 take }#, baz : U8 take }#
            -> { foo : {bar : U8 , foo : U8 }#, baz : U8 }#;
simpleWrong blah = blah;
