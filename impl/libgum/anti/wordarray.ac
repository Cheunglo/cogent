/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$ty:a $id:wordarray_get ($ty:(((WordArray a)!, WordArrayIndex)) args)
{
        if (args.p2 >= (args.p1)->len) {
                return 0;
        }
        return (args.p1)->values[args.p2];
}

$ty:(R (WordArray a) (WordArray a)) $id:wordarray_put ($ty:((#{arr: WordArray a, idx: WordArrayIndex, val: a})) args)
{
        $ty:(R (WordArray a) (WordArray a)) ret;
        
        if (args.idx >= (args.arr)->len) {
                ret.tag = TAG_ENUM_Error;
                ret.Error = args.arr;
        } else {
                (args.arr)->values[args.idx] = args.val;
                ret.tag = TAG_ENUM_Success;
                ret.Success = args.arr;
        }
        return ret;
}

u32 $id:wordarray_length($ty:((WordArray a)!) array)
{
        return array->len;
}

$ty:(ArrA (WordArray a) acc) $id:wordarray_modify($ty:(WordArrayModifyP a acc obsv) args)
{
        $ty:(ArrA (WordArray a) acc) ret;
        $ty:(ElemAO a acc obsv) fargs;
        $ty:(ElemA a acc) fret;

        /* only run fun if the idx is in range */
        if (args.idx >= args.arr->len) {
                ret.acc = args.acc;
                ret.arr = args.arr;
                return ret;
        }
        fargs.elem = args.arr->values[args.idx];
        fargs.acc = args.acc;
        fargs.obsv = args.obsv;
        fret = (($spec:(WordArrayModifyF a acc obsv)) args.f) (fargs);
        args.arr->values[args.idx] = fret.elem;
        ret.acc = fret.acc;
        ret.arr = args.arr;
        return ret;
}

$ty:(Bool) $id:wordarray_cmp ($ty:(((WordArray U8)!, (WordArray U8)!)) args)
{
        $ty:((WordArray U8)!) a = args.p1;
        $ty:((WordArray U8)!) b = args.p2;
        $ty:(Bool) ret;
        int i;

        if (a->len != b->len) {
                ret.boolean = 0;
                return ret;
        }

        for (i = 0; i < a->len; i++) {
                if (a->values[i] != b->values[i]) {
                        ret.boolean = 0;
                        return ret;
                }
        }
        ret.boolean = 1;
        return ret;
}

$ty:((WordArray a, acc)) $id:wordarray_map_no_break($ty:(WordArrayMapNoBreakP a acc obsv) args)
{
        $ty:((WordArray a, acc)) ret;
        $ty:(ElemAO a acc obsv) fargs;
        $ty:((a, acc)) fret;
        u32 to = args.to > args.arr->len ? args.arr->len : args.to;
        u32 i;

        fargs.acc = args.acc;
        fargs.obsv = args.obsv;
        for (i = args.frm; i < to; i++) {
                fargs.elem = args.arr->values[i];
                fret = (($spec:(WordArrayMapNoBreakF a acc obsv)) args.f)(fargs);
                args.arr->values[i] = fret.p1;
                fargs.acc = fret.p2;
        }
        ret.p1 = args.arr;
        ret.p2 = fargs.acc;
        return ret;
}

$ty:(WordArrayMapRE a acc rbrk) $id:wordarray_map($ty:(WordArrayMapP a acc obsv rbrk) args)
{
        $ty:(WordArrayMapRE a acc rbrk) ret;
        $ty:(ElemAO a acc obsv) fargs;
        $ty:(LoopResult (a, acc) (a, rbrk)) fret;
        u32 to = args.to > args.arr->len ? args.arr->len : args.to;
        u32 i;
    
        fargs.obsv = args.obsv;
        fargs.acc = args.acc;
        for (i = args.frm; i < to; i++) {
                fargs.elem = args.arr->values[i];
                fret = (($spec:(WordArrayMapF a acc obsv rbrk)) args.f) (fargs);
    
                if (fret.tag == TAG_ENUM_Break) {
                        args.arr->values[i] = fret.Break.p1;
                        ret.tag = TAG_ENUM_Break;
                        ret.Break.p1 = args.arr;
                        ret.Break.p2 = fret.Break.p2;
                        return ret;
                }
                args.arr->values[i] = fret.Iterate.p1;
                fargs.acc = fret.Iterate.p2;
        }
        ret.tag = TAG_ENUM_Iterate;
        ret.Iterate.p1 = args.arr;
        ret.Iterate.p2 = fargs.acc;
        return ret;
}

$ty:(LoopResult acc rbrk) $id:wordarray_fold($ty:(WordArrayFoldP a acc obsv rbrk) args)
{
        $ty:(ElemAO a acc obsv) fargs;
        $ty:(LoopResult acc rbrk) fret;
        u32 to = args.to > args.arr->len ? args.arr->len : args.to;
        u32 i;
        
        fargs.obsv = args.obsv;
        fargs.acc = args.acc;
        fret.tag = TAG_ENUM_Iterate;
        fret.Iterate = args.acc;
        for (i = args.frm; i < to; i++) {
               fargs.elem = args.arr->values[i];
               fret = (($spec:(WordArrayFoldF a acc obsv rbrk)) args.f) (fargs);
        
               if (fret.tag == TAG_ENUM_Break)
                       return fret;
               fargs.acc = fret.Iterate;
        }
        return fret;
}

$ty:(acc) $id:wordarray_fold_no_break($ty:(WordArrayFoldNoBreakP a acc obsv) args)
{
        $ty:(ElemAO a acc obsv) fargs;
        u32 to = args.to > args.arr->len ? args.arr->len : args.to;
        u32 i;
        
        fargs.obsv = args.obsv;
        fargs.acc = args.acc;
        for (i = args.frm; i < to; i++) {
               fargs.elem = args.arr->values[i];
               fargs.acc = (($spec:(WordArrayFoldNoBreakF a acc obsv)) args.f) (fargs);
        }
        return fargs.acc;
}

$ty:(WordArray a) $id:wordarray_set($ty:(WordArraySetP a) args)
{
	if (args.p2 > args.p1->len) {
		args.p2 = args.p1->len;
	}

        u32 to = (args.p2 + args.p3) > args.p1->len ? args.p1->len : (args.p2 + args.p3);
	memset (args.p1->values + args.p2, args.p4, to);

        return args.p1;
}

$ty:(WordArray a) $id:wordarray_copy($ty:(WordArrayCopyP a) args)
{
        $ty:(WordArray a) dst = args.p1;
        $ty:(WordArray a) src = args.p2;

        u32 dst_index = args.p3;
        u32 src_index = args.p4;

        u32 len = args.p5;

        // early exit -- tried to copy beyond dest
        if (dst_index > dst->len) {
            return dst;
        }

        // truncate write to destination if overflow
        int dst_avail = dst->len - dst_index;
        if (len > dst_avail) {
            len = dst_avail;
        }

        // truncate write from source destination if overflow
        int src_avail = src->len - src_index;
        if (len > src_avail) {
            len = src_avail;
        }

        memcpy (dst->values + dst_index, src->values + src_index, len);
        return dst;
}
