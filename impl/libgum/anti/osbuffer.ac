/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$esc:(#include <adt.h>)
$esc:(#include <wrapper.h>)
#include <generated.h>

$ty:(Result (U32, U32) ()) $id:(osbuffer_deserialise_Ple32)($ty:((OSBuffer!, U32)) args) {
	$ty:(Result (U32, U32) ()) ret;
	$ty:(OSBuffer!) buf = args.p1;

	// printk ("deser u32 @ offset %d\n", args.p2);

	if (args.p2 >= BLOCK_SIZE) {
		ret.tag = TAG_ENUM_Error;
	} else {
		u32 raw = *((u32*)(buf->b_data + args.p2));
		u32 host = le32_to_cpu (raw);

		ret.tag = TAG_ENUM_Success;
		ret.Success.p1 = host;
		ret.Success.p2 = args.p2 + sizeof (u32);
	}

	return ret;
}

// deserialise_Ple16: (OSBuffer!, U32) -> Result (U16, U32) ()
$ty:(Result (U16,U32) ()) $id:osbuffer_deserialise_Ple16 ($ty:((OSBuffer!, U32)) args) {
	$ty:(Result (U16,U32) ()) ret;
	$ty:(OSBuffer!) buf = args.p1;

	// printk ("deser u16 @ offset %d\n", args.p2);

	if (args.p2 >= BLOCK_SIZE) {
		ret.tag = TAG_ENUM_Error;
	} else {
		u16 raw = *((u16*)(buf->b_data + args.p2));
		u16 host = le16_to_cpu (raw);

		// printk ("had le16 raw %d, host %d at offset %d\n", raw, host, args.p2);

		ret.tag = TAG_ENUM_Success;
		ret.Success.p1 = host;
		ret.Success.p2 = args.p2 + sizeof (u16);
	}

	return ret;
}

// deserialise_U8 (OSBuffer!, U32) -> Result (U8, U32) ()
$ty:(Result (U8, U32) ()) $id:osbuffer_deserialise_U8 ($ty:((OSBuffer!, U32)) args) {
	$ty:(Result (U8, U32) ()) ret;
	$ty:(OSBuffer!) buf = args.p1;

	// printk ("deser u8 @ offset %d\n", args.p2);

	if (args.p2 >= BLOCK_SIZE) {
		ret.tag = TAG_ENUM_Error;
	} else {
		u8 raw = *((u8*)(buf->b_data + args.p2));

		ret.tag = TAG_ENUM_Success;
		ret.Success.p1 = raw;
		ret.Success.p2 = args.p2 + sizeof (u8);
	}

	return ret;
}

$ty:(Result (#{ex: ExState, buf: OSBuffer}) (ExState)) $id:osbuffer_create ($ty:(ExState) ex) {
	$ty:(#{ex: ExState, buf: OSBuffer}) success = { .ex = ex, .buf = NULL };
	$ty:(Result (#{ex: ExState, buf: OSBuffer}) (ExState)) ret = { .tag = TAG_ENUM_Success, .Success = success };

	// printk ("'creating' buffer...\n");

	return ret;
}

$ty:(ExState) $id:osbuffer_destroy ($ty:(#{ex: ExState, buf: OSBuffer}) args) {
	// printk ("brelse %p\n", args.buf);
	brelse (args.buf);
	return args.ex;
}

$ty:(OSBuffer) $id:osbuffer_boundary($ty:(OSBuffer) buf)
{
	set_buffer_boundary (buf);
	return buf;
}

$ty:(U32) $id:osbuffer_get_size($ty:(OSBuffer!) buf)
{
	return buf->b_size;
}

$ty:(OSBuffer) $id:osbuffer_set_size ($ty:((OSBuffer, U32)) args) {
	struct buffer_head *buf = args.p1;
	buf->b_size = args.p2;

	printk ("set buffer %p size %llu\n", buf, (unsigned long long)buf->b_size);

	return args.p1;
}

//fs_buffer_read_block: (#{ex: ExState, buf: OSBuffer, blk: U32}) ->
//	Result 	(ExState, OSBuffer)
//			(ExState, OSBuffer)
$ty:(Result (ExState, OSBuffer) (ExState, OSBuffer)) $id:osbuffer_read_block ($ty:(#{ex: ExState, buf: OSBuffer, blk: U32}) args) {
	// when you read from a block, buf NOW becomes a pointer
	// it should have been previous NULL

	// UNLESS it was some previously read buffer, in which case we map
	// into that instead

	$ty:(Result (ExState, OSBuffer) (ExState, OSBuffer)) ret;
	struct super_block* sb = args.ex->sb;

	if (args.buf != NULL) {
		// had existing buffer, map it into that
		printk ("reading block %d into existing buffer %p\n", args.blk, args.buf);
		map_bh (args.buf, sb, (sector_t)args.blk);
	} else {
		// brand new buffer
		printk ("reading block %d into new buffer\n", args.blk);
		struct buffer_head* read_buf = sb_bread (sb, (sector_t)args.blk);
		args.buf = read_buf;
	}

	// check if we read this new buffer okay, and return
	// result based on that
	if (args.buf != NULL) {
		$ty:((ExState, OSBuffer)) success = { .p1 = args.ex, .p2 = args.buf };

		ret.tag = TAG_ENUM_Success;
		ret.Success = success;
	} else {
		printk ("read block failed\n");
		$ty:((ExState, OSBuffer)) error = { .p1 = args.ex, .p2 = args.buf };

		ret.tag = TAG_ENUM_Error;
		ret.Error = error;
	}

	return ret;
}
