/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$ty:(VfsInode) vfs_inode_set_mtime($ty:((VfsInode, OSTimeSpec)) args)
{
	$ty:(VfsInode) inode = args.p1;

	inode->vfs.i_mtime.tv_sec = args.p2.tv_sec;
	inode->vfs.i_mtime.tv_nsec = args.p2.tv_nsec;
	return inode;
}

$ty:(OSTimeSpec) vfs_inode_get_mtime($ty:(VfsInode!) inode)
{
	$ty:(OSTimeSpec) ret;

	ret.tv_sec = inode->vfs.i_mtime.tv_sec;
	ret.tv_nsec = 0;
	return ret;
}

$ty:(VfsInode) vfs_inode_set_ctime($ty:((VfsInode, OSTimeSpec)) args)
{
	$ty:(VfsInode) inode = args.p1;

	inode->vfs.i_ctime.tv_sec = args.p2.tv_sec;
	inode->vfs.i_ctime.tv_nsec = args.p2.tv_nsec;
	return inode;
}

$ty:(OSTimeSpec) vfs_inode_get_ctime ($ty:(VfsInode!) inode)
{
	$ty:(OSTimeSpec) ret;

	ret.tv_sec = inode->vfs.i_ctime.tv_sec;
	ret.tv_nsec = 0;
	return ret;
}

$ty:(VfsInode) vfs_inode_set_gid ($ty:((VfsInode, U32)) args)
{
	$ty:(VfsInode) inode = args.p1;

	i_gid_write (&inode->vfs, args.p2);
	return inode;
}

u32 vfs_inode_get_gid ($ty:(VfsInode!) inode)
{
	return i_gid_read (&inode->vfs);
}

$ty:(VfsInode) vfs_inode_set_uid ($ty:((VfsInode, U32)) args) {
	$ty:(VfsInode) inode = args.p1;

	i_uid_write (&inode->vfs, args.p2);

	return inode;
}

u32 vfs_inode_get_uid ($ty:(VfsInode!) inode)
{
	return i_uid_read (&inode->vfs);
}

$ty:(VfsInode) vfs_inode_set_nlink ($ty:((VfsInode, U32)) args) {
	$ty:(VfsInode) inode = args.p1;

	set_nlink (&inode->vfs, args.p2);
	return inode;
}

// set_mode is special because it also updates the i_fops
$ty:(VfsInode) vfs_inode_set_mode($ty:((VfsInode, U32)) args)
{
	$ty:(VfsInode) inode = args.p1;
	inode->vfs.i_mode = args.p2;

    /* FIXME Alex needs that, I assume wrapper code calls
     * that for us.
	printk ("set mode on inode, setting fops...\n");
	init_inode_by_type (&inode->vfs);
    */
	return inode;
}

#define INODE_GETTER(field) \
u32 vfs_inode_get_##field ($ty:(VfsInode!) inode)\
{\
	return inode->vfs.i_##field;\
}

#define INODE_SETTER(field) \
$ty:(VfsInode) vfs_inode_set_##field($ty:((VfsInode, U32)) args)\
{\
	args.p1->vfs.i_##field = args.p2;\
    return args.p1; \
}

INODE_GETTER(flags)
INODE_GETTER(ino)
INODE_GETTER(nlink)
INODE_GETTER(mode)

INODE_SETTER(flags)
INODE_SETTER(ino)

u64 vfs_inode_get_size ($ty:(VfsInode!) inode)
{
	return inode->vfs.i_size;
}

$ty:(VfsInode) vfs_inode_set_size($ty:((VfsInode, U64)) args)
{
	args.p1->vfs.i_size = args.p2;
    return args.p1;
}

/*

INFER_TYPE_RET vfs_inode_get_mapping (INFER_TYPE_ARGS inode) {
	return inode->vfs.i_mapping;
}

$ty:(VfsInode)INFER_TYPE_RET vfs_inode_set_INFER_TYPE (INFER_TYPE_ARGS args) {
	VfsInode *inode = args.p1;
	inode->vfs.i_FIELD_NAME_FROM_WILDCARD = args.p2;
	return inode;
}

*/

$ty:(VfsInode) vfs_inode_dec_nlink($ty:(VfsInode) inode) {
	inode_dec_link_count (&inode->vfs);
	return inode;
}

$ty:(VfsInode) vfs_inode_inc_nlink ($ty:(VfsInode) inode) {
	inode_inc_link_count (&inode->vfs);
	return inode;
}

/*
INFER_TYPE_RET vfs_inode_bad (INFER_TYPE_ARGS args) {
	//make_bad_inode (&args.inode->vfs);

	args.inode->vfs.i_private = NULL; // no longer freeable from COGENT (take fs)
	// FIXME: oh shit actually we need a lock in private so that we
	// don't try to free when fs is taken

	iget_failed (&args.inode->vfs);

	return args.ex;
}

INFER_TYPE_RET vfs_inode_put (INFER_TYPE_ARGS args) {
	printk ("doing iput %p\n", &args.inode->vfs);

	args.inode->vfs.i_private = 1; // mark as now being freeable from COGENT

	iput (&args.inode->vfs);

	return args.ex;
}

$ty:(VfsInode)INFER_TYPE_RET vfs_inode_unlock ($ty:(VfsInode)INFER_TYPE_ARGS inode) {
	printk ("unlocked inode %p\n", &inode->vfs);

	inode->vfs.i_private = 1; // mark as now being freeable from COGENT

	unlock_new_inode (&inode->vfs);
	return inode;
}

//fs_inode_get: (#{: ExState, ino: U32}) -> 
//	Result (#{ex: ExState, inode: Inode take (fs)}) 
//	(ExState)
INFER_TYPE_RET vfs_inode_get (INFER_TYPE_ARGS args) {
	INFER_TYPE_RET ret;
	struct inode *inode;
    int err = 0;

    printk ("doing iget_locked.. ");

    inode = iget_locked (args.ex->sb, args.ino);
    if (!inode) {
    	printk ("failed\n");
    	ret.tag = TAG_ENUM_Error;
    	ret.Error = args.ex;
    	return ret;
    }

    inode->i_private = NULL; // can't free from COGENT yet

    VfsInode *cogent_inode = EXT2_I (inode);
    INFER_TYPE success = { .ex = args.ex, .inode = cogent_inode };
    ret.tag = TAG_ENUM_Success;
    ret.Success = success;

    printk ("okay\n");

    return ret;
}
*/

