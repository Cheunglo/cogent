/*
 * @TAG(OTHER_GPL)
 */
/*
 * This file is part of UBIFS.
 *
 * Copyright (C) 2006-2008 Nokia Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * Authors: Artem Bityutskiy (Битюцкий Артём)
 *          Adrian Hunter
 */


static inline u32 wubimode_to_ubimode($ty:(UbiMode) mode)
{
   if (mode == $exp:ubiReadOnly)
       return UBI_READONLY;
   if (mode == $exp:ubiReadWrite)
       return UBI_READWRITE;
   else // $id:ubiExclusive
       return UBI_EXCLUSIVE;
}

/**
 * open_ubi - parse UBI device name string and open the UBI device.
 * @name: UBI volume name
 * @mode: UBI volume open mode
 *
 * The primary method of mounting BilbyFs is by specifying the UBI volume
 * character device node path. However, BilbyFs may also be mounted withoug any
 * character device node using one of the following methods:
 *
 * o ubiX_Y    - mount UBI device number X, volume Y;
 * o ubiY      - mount UBI device number 0, volume Y;
 * o ubiX:NAME - mount UBI device X, volume with name NAME;
 * o ubi:NAME  - mount UBI device 0, volume with name NAME.
 *
 * Alternative '!' separator may be used instead of ':' (because some shells
 * like busybox may interpret ':' as an NFS host name separator). This function
 * returns UBI volume description object in case of success and a negative
 * error code in case of failure.
 */
struct ubi_volume_desc *open_ubi(const char *name, int mode)
{
        struct ubi_volume_desc *ubi;
        int dev, vol;
        char *endptr;

        /* First, try to open using the device node path method */
        ubi = ubi_open_volume_path(name, mode);
        if (!IS_ERR(ubi))
                return ubi;

        /* Try the "nodev" method */
        if (name[0] != 'u' || name[1] != 'b' || name[2] != 'i')
                return ERR_PTR(-EINVAL);

        /* ubi:NAME method */
        if ((name[3] == ':' || name[3] == '!') && name[4] != '\0')
                return ubi_open_volume_nm(0, name + 4, mode);

        if (!isdigit(name[3]))
                return ERR_PTR(-EINVAL);

        dev = simple_strtoul(name + 3, &endptr, 0);

        /* ubiY method */
        if (*endptr == '\0')
                return ubi_open_volume(0, dev, mode);

        /* ubiX_Y method */
        if (*endptr == '_' && isdigit(endptr[1])) {
                vol = simple_strtoul(endptr + 1, &endptr, 0);
                if (*endptr != '\0')
                        return ERR_PTR(-EINVAL);
                return ubi_open_volume(dev, vol, mode);
        }

        /* ubiX:NAME method */
        if ((*endptr == ':' || *endptr == '!') && endptr[1] != '\0')
                return ubi_open_volume_nm(dev, ++endptr, mode);

        return ERR_PTR(-EINVAL);
}

$ty:(R (SysState, UbiVol) SysState) $id:wubi_open($ty:(WubiOpenP) args)
{
        $ty:(R (SysState, UbiVol) SysState) ret;
        $ty:(UbiVol) vold;
   
        vold = open_ubi(args.name->values, wubimode_to_ubimode(args.mode));
        if (IS_ERR(vold)) {
            ret.tag = TAG_ENUM_Error;
            ret.Error = args.ex;
            return ret;
        }
        ret.tag = TAG_ENUM_Success; 
        ret.Success.p1 = args.ex;
        ret.Success.p2 = vold;
        return ret;
}

$ty:(SysState) $id:wubi_close($ty:((SysState, UbiVol)) args)
{
        if (args.p2)
                ubi_close_volume(args.p2);
        return args.p1;
}

$ty:(R (SysState, UbiVol) SysState) $id:wubi_open_volume($ty:(WubiOpenVolumeP) args)
{
        $ty:(R (SysState, UbiVol) SysState) ret;
        $ty:(UbiVol) vold;
   
        vold = ubi_open_volume(args.ubi_num, args.vol_id, wubimode_to_ubimode(args.mode));
        if (IS_ERR(vold)) {
                ret.tag = TAG_ENUM_Error;
                ret.Error = args.ex;
                return ret;
        }
        ret.tag = TAG_ENUM_Success; 
        ret.Success.p1 = args.ex;
        ret.Success.p2 = vold;
        return ret;
}

$ty:(UbiVolInfo) $id:wubi_get_vol_info($ty:((UbiVol!, UbiVolInfo)) args)
{
    ubi_get_volume_info(args.p1, args.p2);
    return args.p2;
}

#define VOL_GETTER(FIELD, RT) \
$ty:(RT) $id:wubi_vol_##FIELD($ty:(UbiVolInfo!) vol) \
{ \
    return vol->FIELD; \
}

VOL_GETTER(ubi_num, UbiNum)
VOL_GETTER(vol_id, UbiId)
VOL_GETTER(size, U32)
VOL_GETTER(usable_leb_size, U32)
VOL_GETTER(cdev, U32)

#define DEV_GETTER(FIELD, RT) \
$ty:(RT) $id:wubi_dev_##FIELD($ty:(UbiDevInfo!) vol) \
{ \
    return vol->FIELD; \
}

DEV_GETTER(min_io_size, U32)
DEV_GETTER(max_write_size, U32)

$ty:(WubiGetDevInfoR) $id:wubi_get_dev_info($ty:((UbiNum, UbiDevInfo)) args)
{
        $ty:(WubiGetDevInfoR) ret;
        int err = ubi_get_device_info(args.p1, args.p2);
        if (err) {
                ret.tag = TAG_ENUM_Error;
                ret.Error.p1 = (u32)-err;
                ret.Error.p2 = args.p2;
                return ret;
        }
        ret.tag = TAG_ENUM_Success;
        ret.Success = args.p2;
        return ret;
}

/* 
type WubiIsMappedR = RR SysState Bool ErrCode
*/
$ty:(WubiIsMappedR) $id:wubi_is_mapped($ty:(WubiIsMappedP) args)
{
       $ty:(RR SysState Bool ErrCode) ret; 
       int err;

       err = ubi_is_mapped(args.ubi_vol, args.ebnum);
       ret.p1 = args.ex;
       if (err < 0) {
               ret.p2.tag = TAG_ENUM_Error;
               ret.p2.Error = (u32)-err;
               return ret;
       }
       ret.p2.tag = TAG_ENUM_Success;
       ret.p2.Success.boolean = !!err;
       return ret;
}

/*
type WubiLebReadR = RR (SysState, UbiVol, Buffer) () ErrCode
*/
$ty:(WubiLebReadR) $id:wubi_leb_read($ty:(WubiLebReadP) args)
{
        $ty:(WubiLebReadR) ret;
        int crc = 0; /* No CRC check */
        int err;
        u32 arrlen = args.buf->data->len;
        u32 bufoffs = args.buf_offs > arrlen ? arrlen : args.buf_offs;
        u32 nbbytes = arrlen - bufoffs < args.nb_bytes ? arrlen - bufoffs : args.nb_bytes;

        /* Although this is allowed by the interface, BilbyFs implementation should never pass such invalid values */
        bilbyfs_assert(bufoffs == args.buf_offs);
        bilbyfs_assert(nbbytes == args.nb_bytes);

        bilbyfs_debug("ubi_leb_read: ubivol=%p, ebnum=%u, buffoffs=%u, nbbytes=%u, crc=%u\n", args.ubi_vol, args.ebnum, bufoffs, nbbytes, crc);
        err = ubi_leb_read(args.ubi_vol, args.ebnum, &args.buf->data->values[bufoffs], bufoffs, nbbytes, crc);
        ret.p1.p1 = args.ex;
        ret.p1.p2 = args.buf;
        bilbyfs_debug("ubi_leb_read(ubivol=%p) = %d\n", ret.p1.p2, err);
        if (err) {
                bilbyfs_err("ubi_leb_read: Error %d\n", err);
                ret.p2.tag = TAG_ENUM_Error;
                ret.p2.Error= (u32)-err;
                return ret;
        }
        ret.p2.tag = TAG_ENUM_Success;
        return ret;
}

#define RES_UBI_UNPACK() \
        bilbyfs_debug("ubi_x(ubivol=%p) = %d\n", args.ubi_vol, err); \
        ret.p1.p1 = args.ex; \
        ret.p1.p2 = args.ubi_vol; \
        if (err) { \
            ret.p2.tag = TAG_ENUM_Error; \
            ret.p2.Error = (u32)-err; \
            return ret; \
        } \
        ret.p2.tag = TAG_ENUM_Success; \
        return ret

$ty:(ResUbi) $id:wubi_leb_write($ty:(WubiLebWriteP) args)
{
        $ty:(ResUbi) ret;
        u32 arrlen = args.robuf->data->len;
        u32 bufoffs = args.buf_offs > arrlen ? arrlen : args.buf_offs;
        u32 nbbytes = arrlen - bufoffs < args.nb_bytes ? arrlen - bufoffs : args.nb_bytes;
        const void *buf = &args.robuf->data->values[bufoffs];
        int err;

        /* Although this is allowed by the interface, BilbyFs implementation should never pass such invalid values */
        bilbyfs_assert(bufoffs == args.buf_offs);
        bilbyfs_assert(nbbytes == args.nb_bytes);

        bilbyfs_debug("ubi_leb_write: ubivol=%p, ebnum=%u, buffoffs=%u, nbbytes=%u\n", args.ubi_vol, args.ebnum, bufoffs, nbbytes);
        err = ubi_leb_write(args.ubi_vol, args.ebnum, buf, bufoffs, nbbytes);
        if (err) {
                bilbyfs_err("ubi_leb_write: Error %d, ubivol=%p, ebnum=%u, buffoffs=%u, nbbytes=%u, args.bufoffs = %u\n", err, args.ubi_vol, args.ebnum, bufoffs, nbbytes, args.buf_offs);
        }
        RES_UBI_UNPACK();
}

$ty:(ResUbi) $id:wubi_leb_change($ty:(WubiLebChangeP) args)
{
        $ty:(ResUbi) ret;
        u32 arrlen = args.robuf->data->len;
        u32 nbbytes = args.nb_bytes > arrlen ? arrlen : args.nb_bytes;
        const void *buf = args.robuf->data->values;
        int err;

        /* Although this is allowed by the interface, BilbyFs implementation should never pass such invalid values */
        bilbyfs_assert(nbbytes == args.nb_bytes);
        bilbyfs_debug("ubi_leb_change: ubivol=%p, ebnum=%u, nbbytes=%u\n", args.ubi_vol, args.ebnum, nbbytes);
        err = ubi_leb_change(args.ubi_vol, args.ebnum, buf, nbbytes);
        if (err) {
                bilbyfs_err("ubi_leb_change: Error %d, ubivol=%p, ebnum=%u, nbbytes=%u\n", err, args.ubi_vol, args.ebnum, nbbytes);
        }
        RES_UBI_UNPACK();
}

$ty:(ResUbi) $id:wubi_leb_erase($ty:(WubiLebEraseP) args)
{
        $ty:(ResUbi) ret;
        int err;

        bilbyfs_debug("ubi_leb_erase: ubivol=%p, ebnum=%u\n", args.ubi_vol, args.ebnum);
        err = ubi_leb_erase(args.ubi_vol, args.ebnum);
        RES_UBI_UNPACK();
}
