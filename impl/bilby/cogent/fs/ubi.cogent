--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

include <gum/common.cogent>
include <gum/buffer.cogent>
include "bilbyfs.cogent"

type EbNum = U32

-- See linux/mtd/ubi.h
type UbiMode = U32

ubiReadOnly : UbiMode
ubiReadOnly = 1

ubiReadWrite : UbiMode
ubiReadWrite = 2

ubiExclusive : UbiMode
ubiExclusive = 3

type UbiVol
type ResUbi = RR (ExState, UbiVol) () ErrCode

type UbiNum = U32
type UbiId = U32
type UbiVolInfo
{-
    ubi_num : UbiNum,
    vol_id : UbiId,
    size : U32, -- nb erase-blocks
    usable_leb_size : U32,
    cdev : U32
    -- more unused fields
-}

wubi_vol_ubi_num: UbiVolInfo! -> UbiNum
wubi_vol_vol_id: UbiVolInfo! -> UbiId
wubi_vol_size: UbiVolInfo! -> U32 -- nb erase-blocks
wubi_vol_usable_leb_size: UbiVolInfo! -> U32
wubi_vol_cdev: UbiVolInfo! -> U32

newUbiVolInfo: ExState -> R (ExState, UbiVolInfo) ExState
freeUbiVolInfo:  (ExState, UbiVolInfo) -> ExState

type UbiDevInfo
wubi_dev_min_io_size: UbiDevInfo! -> U32
wubi_dev_max_write_size: UbiDevInfo! -> U32
{-
    min_io_size :U32,
    max_write_size : U32
-}

newUbiDevInfo: ExState -> R (ExState, UbiDevInfo) ExState
freeUbiDevInfo: (ExState, UbiDevInfo) -> ExState

type WubiOpenP = #{ex:ExState, name:CString!, mode:UbiMode}
wubi_open: WubiOpenP -> R (ExState, UbiVol) ExState
type WubiOpenVolumeP = #{ex:ExState, ubi_num:UbiNum, vol_id:UbiId, mode:UbiMode}
wubi_open_volume: WubiOpenVolumeP -> R (ExState, UbiVol) ExState
wubi_close: (ExState, UbiVol) -> ExState

wubi_get_vol_info: (UbiVol!, UbiVolInfo) -> UbiVolInfo
type WubiGetDevInfoR = R UbiDevInfo (ErrCode, UbiDevInfo)
wubi_get_dev_info: (UbiNum, UbiDevInfo) -> WubiGetDevInfoR

type WubiIsMappedP = #{ex:ExState, ubi_vol:UbiVol!, ebnum:EbNum}
type WubiIsMappedR = RR ExState Bool ErrCode
wubi_is_mapped: WubiIsMappedP -> WubiIsMappedR 
-- ubi_is_mapped(ex, eb_number)
-- Indicates whether an erase-block is mapped by UBI (has been written to).

type WubiLebReadP = #{ex:ExState, ubi_vol:UbiVol!, ebnum:EbNum, buf: Buffer, buf_offs:BufOffs, nb_bytes:U32}
type WubiLebReadR = RR (ExState, Buffer) () ErrCode
wubi_leb_read: WubiLebReadP -> WubiLebReadR 
-- ubi_leb_read(ex, eb_number, buf, buf_offset, size)
-- Reads @size bytes of erase-block @eb_number into buf, 
-- data is read from the erase-block starting at offset @buf_offs,
-- data is copied into buf starting at offset @buf_offset of buf.
-- @nb_bytes: number of bytes to read
-- Note that the buffer as long as the erase-block to be able to read
-- the end of an erase-block. This is because we use the same offset
-- in the buffer is the one in the erase-block.

type WubiLebWriteP = #{ex:ExState, ubi_vol:UbiVol, ebnum:EbNum, robuf: Buffer!, buf_offs:BufOffs, nb_bytes:U32}
wubi_leb_write: WubiLebWriteP -> ResUbi
-- ubi_leb_write(ex, eb_number, (buf, buf_offs), size)
-- Writes @size bytes to erase-block @eb_number
-- data is written to the erase-block starting at offset @buf_offs,
-- data is read from buf starting at offset @buf_offset of buf.
-- @size has to be a multiple of mount_st.super.io_size
-- @buf_offs + @size must be lesser or equal to mount_st.super.eb_size

type WubiLebChangeP = #{ex:ExState, ubi_vol:UbiVol, ebnum:EbNum, robuf: Buffer!, nb_bytes:U32}
wubi_leb_change : WubiLebChangeP -> ResUbi
-- ubi_leb_change(ex, ubi_vol, eb_number, buf, len)

type WubiLebEraseP = #{ex:ExState, ubi_vol:UbiVol, ebnum:EbNum}
wubi_leb_erase : WubiLebEraseP -> ResUbi
-- ubi_leb_erase(ex, eb_number)
-- Erase the erase-block @eb_number.
