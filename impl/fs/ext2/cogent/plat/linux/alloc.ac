/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

#define GEN_ALLOC(TYPE) \
$ty:(RR (SysState) (TYPE) ()) $id:(malloc_##TYPE)($ty:(SysState) heap) \
{ \
    $ty:(RR (SysState) (TYPE) ()) ret = {.p1 = heap}; \
 \
    ret.p2.Success = kmalloc(sizeof (*(ret.p2.Success)), GFP_NOFS); \
    if (unlikely(ret.p2.Success == NULL)) \
        ret.p2.tag = TAG_ENUM_Error; \
    else \
        ret.p2.tag = TAG_ENUM_Success; \
    return ret; \
} \
 \
$ty:(SysState) $id:(free_##TYPE)($ty:((SysState, TYPE take (..))) args) \
{ \
    kfree(args.p2); \
    return args.p1; \
}

GEN_ALLOC(Chain)
GEN_ALLOC(FsState)
GEN_ALLOC(Indirect)
GEN_ALLOC(Ext2Superblock)


$ty:(R (SysState, WordArray a) SysState) $id:wordarray_create_nz($ty:((SysState, U32)) args)
{
    $ty:(SysState) h = args.p1;
    u32 size = args.p2;
    $ty:(R (SysState, WordArray a) SysState) ret;

    $ty:(WordArray a) array = kmalloc(sizeof *array +
                                  size * sizeof *array->values, GFP_NOFS);

    if (unlikely(array == NULL)) {
        ret.tag = TAG_ENUM_Error;
        ret.Error = h;
    } else {
        array->len = size;
        array->values = (void *)(array + 1);
        ret.tag = TAG_ENUM_Success;
        ret.Success.p1 = h;
        ret.Success.p2 = array;
    }

    return ret;
}

/*
 * Like wordarray_create_nz, but bzeros the array
 * Can't work out how to call word_array_create_nz and then bzero,
 * so repeating the code. Yuck.
 */
$ty:(R (SysState, WordArray a) SysState) $id:wordarray_create($ty:((SysState, U32)) args)
{
    $ty:(SysState) h = args.p1;
    u32 size = args.p2;
    $ty:(R (SysState, WordArray a) SysState) ret;

    ret.Success.p2 = kmalloc(sizeof(*ret.Success.p2) +
               size * sizeof(*(ret.Success.p2->values)), GFP_NOFS);

    if (unlikely(ret.Success.p2 == NULL)) {
        ret.tag = TAG_ENUM_Error;
        ret.Error = h;
    } else {
        ret.Success.p2->len = size;
        ret.Success.p2->values = (void *)(ret.Success.p2 + 1);
        memset(ret.Success.p2->values, 0, size * sizeof(*(ret.Success.p2->values)));
        ret.tag = TAG_ENUM_Success;
        ret.Success.p1 = h;
    }

    return ret;
}

$ty:(SysState) $id:wordarray_free($ty:((SysState, WordArray a)) args)
{
    kfree(args.p2);
    return args.p1;
}

$ty:(R (SysState, Array a) SysState) $id:array_create($ty:((SysState, U32)) args)
{
	$ty:(R ((SysState, Array a)) SysState) ret;
$ty:(Array a) array = kmalloc(sizeof(*array), GFP_NOFS);
	u32 size = args.p2;

	if (array == NULL || !size) {
		ret.tag = TAG_ENUM_Error;
		ret.Error = args.p1;
	} else {
		array->values = kzalloc(size * sizeof(*(array->values)), GFP_NOFS);
		if (array->values == NULL) {
			kfree(array);
			ret.tag = TAG_ENUM_Error;
			ret.Error = args.p1;
		} else {
			array->len = size;

			ret.tag = TAG_ENUM_Success;
			ret.Success.p1 = args.p1;
			ret.Success.p2 = array;
		}
	}
	return ret;
}

$ty:(SysState) $id:array_free($ty:(ArrayFreeP a) args) {
        int i;

        if (args.arr->values) {
            for (i = 0; i < args.arr->len; i++) {
                $ty:((SysState, a)) fargs;

                fargs.p1 = args.ex;
                fargs.p2 = args.arr->values[i];

                if (fargs.p2)
                    (($spec:(FreeF a)) args.f) (fargs);
            }
            kfree(args.arr->values);
        }
        kfree(args.arr);
        return args.ex;
}

$ty:(R (SysState, UArray a) SysState) $id:uarray_create($ty:((SysState, U32)) args)
{
    $ty:(SysState) h = args.p1;
    u32 size = args.p2;
    $ty:(R (SysState, UArray a) SysState) ret;

    ret.Success.p2 = kmalloc(sizeof(*ret.Success.p2) +
               size * sizeof(*(ret.Success.p2->values)), GFP_NOFS);

    if (unlikely(ret.Success.p2 == NULL)) {
        ret.tag = TAG_ENUM_Error;
        ret.Error = h;
    } else {
        ret.Success.p2->len = size;
        ret.Success.p2->values = (void *)(ret.Success.p2 + 1);
        memset(ret.Success.p2->values, 0, size * sizeof(*(ret.Success.p2->values)));
        ret.tag = TAG_ENUM_Success;
        ret.Success.p1 = h;
    }

    return ret;
}

$ty:(SysState) $id:uarray_free($ty:((SysState, UArray a)) args)
{
    kfree(args.p2);
    return args.p1;
}


$ty:((SysState, acc)) $id:uarray_freeacc($ty:((UArrayFreeAccP a acc obsv)) args)
{
    $ty:(UArray a) array = args.arr;
    u32 i;

    $ty:(FreeAccF a acc obsv) freeFunc = args.f;
    $ty:(SysState) h = args.ex;
    $ty:acc acc = args.acc;

    // loop over each element, and free it
    if (array->values) {
        for (i = 0; i < array->len; i++) {
            if (array->existence[i]) {
                // note: we use a tuple here
                $ty:((SysState, a, acc, obsv!)) heap_array = {
                    .p1 = h,
                    .p2 = array->values[i],
                    .p3 = acc,
                    .p4 = args.obsv
                };

                $ty:((SysState, acc)) free_res = (($spec:(FreeAccF a acc obsv))freeFunc)(heap_array);
                h = free_res.p1;
                acc = free_res.p2;
            }
        }

        kfree (array->values);
    }

    kfree (array);

    $ty:((SysState, acc)) ret = { h, acc };
    return ret;
}
