/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

#define VfsDirEmitR $ty:(LoopResult (#{dirctx: VfsDirContext}) (#{dirctx: VfsDirContext}))

VfsDirEmitR vfs_dir_emit($ty:(VfsDirEmitP) args)
{
    VfsDirEmitR ret;
    bool_t keep_going;

    $ty:(VfsDirContext) cogent_ctx = args.dirctx;
    struct dir_context *ctx = cogent_ctx->os;
    ctx->pos = cogent_ctx->pos;

    // printk ("vfs_dir_emit(name=%s(len=%d), ino=%u, type=%u)\n",
    //          args.name->values, args.name->len, args.ino, args.ftype);
    keep_going.boolean = dir_emit(ctx, args.name->values, args.name->len,
                            args.ino, args.ftype);
    
    if (!keep_going.boolean) {
        ret.tag = TAG_ENUM_Break;
        ret.Break.dirctx = args.dirctx;
    } else {
        ret.tag = TAG_ENUM_Iterate;
        ret.Iterate.dirctx = args.dirctx;
    }

    return ret;
}


$ty:((SysState, VfsInode)) vfs_inode_mark_dirty ($ty:((SysState, VfsInode)) args) {
    // printk ("vfs_inode_mark_dirty: dirtied %p ino %d\n", &args.p2->vfs.inode_lin, args.p2->vfs.inode_lin.i_ino);
    mark_inode_dirty (&(args.p2->vfs.inode_lin));
    return args;
}

// shouldn't be re-entrnat?
$ty:(R (SysState, VfsInode) (SysState, VfsInode)) vfs_inode_insert($ty:(#{ex: SysState, inode: VfsInode}) args)
{
    $ty:(R (SysState, VfsInode) (SysState, VfsInode)) ret;

    if (insert_inode_locked (&(args.inode->vfs.inode_lin)) == 0) {
        /* printk ("vfs_inode_insert: inserted %p ino %d\n", 
                   &args.inode->vfs.inode_lin, 
                   args.inode->vfs.inode_lin.i_ino);
        */

        ret.tag = TAG_ENUM_Success;
        ret.Success.p1 = args.ex;
        ret.Success.p2 = args.inode;
    } else {
        ret.tag = TAG_ENUM_Error;
        ret.Error.p1 = args.ex;
        ret.Error.p2 = args.inode;
    }

    return ret;
}

bool_t vfs_inode_is_sync_dir ($ty:(VfsInode!) inode) {
    bool_t ret;
    ret.boolean = IS_DIRSYNC (&(inode->vfs.inode_lin));
    return ret;
}

bool_t vfs_inode_is_sync ($ty:(VfsInode!)inode) {
    bool_t ret;
    ret.boolean = IS_SYNC (&(inode->vfs.inode_lin));
    return ret;
}

/*
// FIXME: re-entrant, but may lock
$ty:(RR (SysState, VfsInode) () U32) vfs_page_symlink ($ty:((SysState, VfsInode, CString!)) args) {
    $ty:(RR (SysState, VfsInode) () U32) ret;
    ret.p1.p1 = args.p1;
    ret.p1.p2 = args.p2;

    int err = page_symlink (&(args.p2->vfs.inode_lin), args.p3->values, args.p3->len);
    if (err) {
        ret.p2.tag = TAG_ENUM_Error;
        ret.p2.Error = err;
    } else {
        ret.p2.tag = TAG_ENUM_Success;
    }

    return ret;
}
*/

$ty:(VfsInode) vfs_inode_link_device ($ty:((VfsInode, VfsMode, #VfsDevice)) args) {
    init_special_inode (&(args.p1->vfs.inode_lin), args.p2, args.p3);
    return args.p1;
}

$ty:(#VfsDevice) vfs_create_device ($ty:((VfsDeviceMajor, VfsDeviceMinor)) args) {
    return MKDEV (args.p1, args.p2);
}

$ty:((VfsDeviceMajor, VfsDeviceMinor)) vfs_device_inspect ($ty:(#VfsDevice) dev) {
    $ty:((VfsDeviceMajor, VfsDeviceMinor)) ret = {.p1 = MAJOR(dev), .p2 = MINOR(dev)};
    return ret;
}

$escstm:(#if LINUX_VERSION_CODE > KERNEL_VERSION(4,19,0))
$ty:((SysState, OSTimeSpec)) os_get_current_fs_time($ty:((SysState, VfsInode!)) args)
{
    $ty:((SysState, OSTimeSpec)) ret;
    struct inode *inode = &(args.p2->vfs.inode_lin);
    struct timespec64 ts;

    ktime_get_coarse_real_ts64(&ts);
    struct timespec64 now = timespec64_trunc(ts, inode->i_sb->s_time_gran);

    ret.p2.tv_sec = now.tv_sec;
    ret.p2.tv_nsec = now.tv_nsec;

    ret.p1 = args.p1;

    return ret;
}
$escstm:(#else)
$ty:((SysState, OSTimeSpec)) os_get_current_fs_time($ty:((SysState, VfsInode!)) args)
{
    $ty:((SysState, OSTimeSpec)) ret;
    struct inode *inode = &(args.p2->vfs.inode_lin);

    struct timespec now = timespec_trunc(current_kernel_time(), inode->i_sb->s_time_gran);

    ret.p2.tv_sec = now.tv_sec;
    ret.p2.tv_nsec = now.tv_nsec;

    ret.p1 = args.p1;

    return ret;
}
$escstm:(#endif)
