--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

include <gum/common/common.cogent>
include <gum/common/log.cogent>
include <gum/kernel/linux/errno.cogent>
include <gum/fs/linux/vfs.cogent>
include <gum/common/allocpool.cogent>
include <gum/common/buffer.cogent>
include <gum/common/rbt.cogent>
include "serial.cogent"
include "ubi.cogent"

is_set: (U32, U32) -> Bool
is_set(flags, mask) = (flags .&. mask) /= 0

type ObjAddr = #{ ebnum : U32, offs : U32, len : U32, sqnum : U64 } 
mkObjAddr: ObjAddr
mkObjAddr = #{ebnum=0,offs=0,len=0,sqnum=0}
type FsInode = { a: U32 }

type MountState = {
  eb_recovery: U32,
  eb_recovery_offs: U32,
  super : ObjSuper,
  obj_sup: Obj take (ounion),
  super_offs: U32,
  vol : UbiVolInfo,
  dev : UbiDevInfo,
  no_summary : Bool
}
newMountState: SysState -> R (SysState, MountState take (..)) SysState
freeMountState: (SysState, MountState take (..)) -> SysState

type DelNode = #{
  id : ObjId,
  oaddr: ObjAddr
}

type IndexState = #{ addrs : Rbt ObjId ObjAddr } 

type RbtIndexNode = RbtNode ObjId ObjAddr

type GimNode = #{ count : U16, sqnum : U64 } 
type RbtGimNode = RbtNode ObjId GimNode

idx_to_gim_node: RbtIndexNode -> RbtGimNode

type FsopState = { is_ro : Bool } 
newFsopState: SysState -> R (SysState, FsopState take (..)) SysState
freeFsopState: (SysState, FsopState take (..)) -> SysState


type EbAddr = #{ ebnum : U32, offs : U32 } 

-- Invariant on FsmState / OstoreState
-- If ostore_st.cur_eb /= word32Max
--  fsm_st.used_eb[ostore_st.cur_eb] = True
-- endif
type FsmState = { nb_free_eb : U32
                , used_eb : WordArray U8
                , dirty_space : WordArray U32
                , gim : Rbt ObjId GimNode } 
newFsmState: (SysState) -> R (SysState, FsmState take (..)) SysState
freeFsmState: (SysState, FsmState take (..)) -> SysState

-- Invariant on OstoreState:
--   All objects in the index that have ostore_st.cur_eb
--   as ebnum, must also have an offset within 0 and used.
--   Their ino must be within bilbyFsFirstIno and next_inum
--   Their sqnum must be within 0 and next_sqnum

--   All the flash pages from 0 to sync_offs must contain
--   the same data as in wbuf.

type AllocPools = #{idx: AllocPool RbtIndexNode, gim: AllocPool RbtGimNode}

type OstoreState = {
  next_inum : U32
, next_sqnum : U64
, rbuf : Buffer
, wbuf_eb : U32
, wbuf : Buffer
, used : U32
, sync_offs : U32
, opad : Obj
, pools: AllocPools
, oaddr : ObjAddr
, fsm_st : FsmState
, index_st : IndexState
, ubi_vol : UbiVol
, summary : ObjSummary
, sum_obj : Obj
}
newOstoreState: (SysState) -> R (SysState, OstoreState take (..)) SysState
freeOstoreState: (SysState, OstoreState take (..)) -> SysState

type FsState = { fsop_st : FsopState
               , mount_st : MountState
               , ostore_st : OstoreState } 
newFsState: (SysState) -> R (SysState, FsState take (..)) SysState
freeFsState: (SysState, FsState take (..)) -> SysState

ostoreWriteNone : U32
ostoreWriteNone = 0

ostoreWriteGC : U32
ostoreWriteGC = 1

ostoreWriteDel : U32
ostoreWriteDel = 2

-- This flags forces ostore_sync to fill up the current erase-block.
-- If summaries are enabled, it ensures that a summary is written at
-- the end of the erase-block too.
ostoreWriteNewEb : U32
ostoreWriteNewEb = 4

ostoreWriteAtomEb : U32
ostoreWriteAtomEb = 8

ostoreWriteForceSync : U32
ostoreWriteForceSync = 16

nilObjId : U64
nilObjId = word64Max

bilbyFsTransIn : ObjTrans
bilbyFsTransIn = 1

bilbyFsTransCommit : ObjTrans
bilbyFsTransCommit = 2

bilbyFsPadObjId : ObjId
bilbyFsPadObjId = nilObjId

bilbyFsPadByte : U8
bilbyFsPadByte = 66

bilbyFsMaxObjPerTrans : U32
bilbyFsMaxObjPerTrans = 2048

bilbyFsMaxNameLen : U32
bilbyFsMaxNameLen = 255

bilbyFsMaxInum : U32
bilbyFsMaxInum = word32Max

bilbyFsMaxNbDentarrEntries : U32
bilbyFsMaxNbDentarrEntries = 16

bilbyFsSuperEbNum : U32
bilbyFsSuperEbNum = 0

bilbyFsFirstLogEbNum : U32
bilbyFsFirstLogEbNum = 2

bilbyFsBlockSize : U32
bilbyFsBlockSize = 4096

bilbyFsBlockShift : U32
bilbyFsBlockShift = 12

bilbyFsITypeReg: U8
bilbyFsITypeReg = 0
bilbyFsITypeDir: U8
bilbyFsITypeDir = 1
bilbyFsITypeLnk: U8
bilbyFsITypeLnk = 2
bilbyFsITypeBlk: U8
bilbyFsITypeBlk = 3
bilbyFsITypeChr: U8
bilbyFsITypeChr = 4
bilbyFsITypeFifo: U8
bilbyFsITypeFifo = 5
bilbyFsITypeSock: U8
bilbyFsITypeSock = 6
bilbyFsITypeCnt: U8
bilbyFsITypeCnt = 7

bilbyFsDefaultNbReservedGc : U32
bilbyFsDefaultNbReservedGc = 3

bilbyFsDefaultNbReservedDel : U32
bilbyFsDefaultNbReservedDel = 3

bilbyFsRootIno : U32
bilbyFsRootIno = 24


print_field_u32: (String, U32) -> ()
#if DEBUG
print_field_u32 (f, v) =
  cogent_debug f ;
  cogent_debug " " ;
  cogent_debug_u32 v ;
  cogent_debug "\n"
#else
print_field_u32 (_, _) = ()
#endif

print_field_u64: (String, U64) -> ()
#if DEBUG
print_field_u64 (f, v) =
  cogent_debug f ;
  cogent_debug " " ;
  cogent_debug_u64 v ;
  cogent_debug "\n"
#else
print_field_u64 (_, _) = ()
#endif

print_obj_super: ObjSuper! -> ()
#if DEBUG
print_obj_super o =
  cogent_debug "ObjSuper\n" ;
  print_field_u32 ("eb_size", o.eb_size) ;
  print_field_u32 ("io_size", o.io_size) ;
  print_field_u32 ("cur_eb", o.cur_eb) ;
  print_field_u32 ("cur_offs", o.cur_offs) ;
  print_field_u64 ("next_sqnum", o.next_sqnum) ;
  print_field_u32 ("last_inum", o.last_inum) ;
  print_field_u32 ("nb_reserved_gc", o.nb_reserved_gc) ;
  print_field_u32 ("nb_reserved_del", o.nb_reserved_del) ;
  cogent_debug "end\n"
#else
print_obj_super _ = ()
#endif

bilbyfs_error: String -> ()
bilbyfs_error_u32: U32 -> ()
