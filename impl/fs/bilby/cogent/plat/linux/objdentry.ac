// $ty:(Buffer) memcpy_s_ObjDentry ($ty:((Buffer, BufOffs, ObjDentry!)) args)
// {
//     bilbyfs_debug ("memcpy_s_ObjDentry");
//     $ty:(Buffer) buf = args.p1;
//     memcpy(buf->data->values + args.p2, (void*)args.p3, sizeof (*args.p3) + (size_t) args.p3->nlen);
//     return buf;
// }

// $ty:((SysState, ObjDentry))
// memcpy_d_ObjDentry ($ty:((SysState, Buffer!, ObjDentry take (..), BufOffs, U32)) args)
// {
//     bilbyfs_debug ("memcpy_d_ObjDentry");
//     $ty:((SysState, ObjDentry)) ret;
//     ret.p1 = args.p1;
//     ret.p2 = args.p3;
//     memcpy((void*)args.p3, (void*)args.p2->data->values + args.p4, args.p5);
//     return ret;
// }

// $ty:(Bool) str_cmp ($ty:((CStr!, CStr!)) args)
// {
//     if (strcmp(args.p1, args.p2)) {
//         return $exp:(True);
//     } else {
//         return $exp:(False);
//     }
// }

$ty:(CStr!) cstring_to_cstr ($ty:(CString!) args)
{
    return args->values;
}

// $ty:(Bool) wordarray_str_cmp ($ty:((CString!, CStr!)) args)
// {
//     int res = strcmp (args.p1->values, args.p2);
//     if (res) {
//         return $exp:(True);
//     } else {
//         return $exp:(False);
//     }
// }

char* get_ObjDentry_name_bang_str ($ty:(ObjDentry) args)
{
    return args->name;
}

$ty:(CString!) get_ObjDentry_name_bang ($ty:(ObjDentry!) args)
{
    $ty:(CString!) ret = kmalloc (sizeof (*ret));
    char* val = kmalloc (args->nlen);
    if (!ret || !val) {
        bilbyfs_debug ("get_ObjDentry_name_bang failed to malloc!");
        return NULL;
    }
    ret->len = args->nlen;
    ret->values = val;
    memcpy(val, args->name, args->nlen);
    return ret;
}

$ty:((ObjDentry take (..)) put (name))
set_ObjDentry_name ($ty:((ObjDentry take (..), CString!, U32)) args)
{
    $ty:(ObjDentry) dent = args.p1;
    memcpy((void*)dent->name, (void*)args.p2->values, args.p3);
    return dent;
}


$ty:((SysState, Vector)) memcpy_d_ObjDentryVector ($ty:((SysState, Buffer!, Vector, BufOffs, U32)) args)
{
    $ty:((SysState, Vector)) ret;
    ret.p1 = args.p1;
    ret.p2 = args.p3;
    memcpy(ret.p2, (void*)args.p2->data->values + args.p4, args.p5);
    return ret;
}

// TODO: memcpy_s_ObjDentryVector

// TODO: dentry_vector_lookup_nm

$ty:(FocusVectorFRet ())
dentarr_del_dentry_vector ($ty:(FocusVectorFArg () CString!) args)
{
    // TODO: implement me!!!
    $ty:(FocusVectorFRet ()) ret;
    ret.uvec = args.uvec;
    ret.fvec = args.fvec;
    return ret;
}

$ty:(FocusVectorFRet U32)
size_ObjDentry_vector ($ty:(FocusVectorFArg () ()) args)
{
    // TODO: implement me!!!
    $ty:(FocusVectorFRet U32) ret;


    return ret;
}
