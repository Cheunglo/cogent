/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$ty:(R (SysState, Array Obj) SysState) arrayobj_alloc(int len)
{
        $ty:(R (SysState, Array Obj) SysState) ret;

        ret.Success.p1 = NULL;
        ret.Success.p2 = kzalloc(sizeof(*ret.Success.p2));
        if (!ret.Success.p2) {
                ret.tag = TAG_ENUM_Error;
                ret.Error = NULL;
                return ret;
        }
        ret.Success.p2->len = len;
        ret.Success.p2->values = kzalloc(sizeof(*(ret.Success.p2->values)) * len);
        if (!ret.Success.p2->values) {
                kfree(ret.Success.p2);
                ret.tag = TAG_ENUM_Error;
                ret.Error = NULL;
                return ret;
        }
        ret.tag = TAG_ENUM_Success;
        return ret;
}
/*
arrayobj_create1: (SysState, Obj) -> R (SysState, Array Obj) SysState
*/
$ty:(R (SysState, Array Obj) SysState) $id:arrayobj_create1($ty:((SysState, Obj)) args)
{
        $ty:(R (SysState, Array Obj) SysState) ret = arrayobj_alloc(1);

        if (ret.tag == TAG_ENUM_Error) {
                $ty:((SysState, Obj)) fargs;
                fargs.p1 = args.p1;
                fargs.p2 = args.p2;
                $exp:deep_freeObj(fargs);
                return ret;
        }
        ret.Success.p2->values[0] = args.p2;
        return ret;
}
/*
arrayobj_create3: (SysState, Obj, Obj, Obj) -> R (SysState, Array Obj) SysState
*/
$ty:(R (SysState, Array Obj) SysState) $id:arrayobj_create3($ty:((SysState, Obj, Obj, Obj)) args)
{
        $ty:(R (SysState, Array Obj) SysState) ret = arrayobj_alloc(3);

        if (ret.tag == TAG_ENUM_Error) {
                $ty:((SysState, Obj)) fargs;

                fargs.p1 = args.p1;
                fargs.p2 = args.p2;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p3;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p4;
                $exp:deep_freeObj(fargs);
                return ret;
        }
        ret.Success.p2->values[0] = args.p2;
        ret.Success.p2->values[1] = args.p3;
        ret.Success.p2->values[2] = args.p4;
        return ret;
}

/*
arrayobj_create4: (SysState, Obj, Obj, Obj, Obj) -> R (SysState, Array Obj) SysState
*/
$ty:(R (SysState, Array Obj) SysState) $id:arrayobj_create4($ty:((SysState, Obj, Obj, Obj, Obj)) args)
{
        $ty:(R (SysState, Array Obj) SysState) ret = arrayobj_alloc(4);

        if (ret.tag == TAG_ENUM_Error) {
                $ty:((SysState, Obj)) fargs;

                fargs.p1 = args.p1;
                fargs.p2 = args.p2;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p3;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p4;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p5;
                $exp:deep_freeObj(fargs);
                return ret;
        }
        ret.Success.p2->values[0] = args.p2;
        ret.Success.p2->values[1] = args.p3;
        ret.Success.p2->values[2] = args.p4;
        ret.Success.p2->values[3] = args.p5;
        return ret;
}

/*
arrayobj_create4_ret2: (SysState, Obj, Obj, Obj, Obj) -> R (SysState, Array Obj) (SysState, Obj)
 Returns the second object in case of error.
*/
$ty:(R (SysState, Array Obj) (SysState, Obj)) $id:(arrayobj_create4_ret2)($ty:((SysState, Obj, Obj, Obj, Obj)) args)
{
        $ty:(R (SysState, Array Obj) SysState) reta = arrayobj_alloc(4);
        $ty:(R (SysState, Array Obj) (SysState, Obj)) ret;

        ret.tag = reta.tag;
        ret.Success = reta.Success;

        if (ret.tag == TAG_ENUM_Error) {
                $ty:((SysState, Obj)) fargs;

                fargs.p1 = args.p1;
                fargs.p2 = args.p2;
                $exp:deep_freeObj(fargs);
                /* We return the second Obj parameter */
                ret.Error.p2 = args.p3;
                fargs.p2 = args.p4;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p5;
                $exp:deep_freeObj(fargs);

                ret.Error.p1 = args.p1;
                return ret;
        }
        ret.Success.p2->values[0] = args.p2;
        ret.Success.p2->values[1] = args.p3;
        ret.Success.p2->values[2] = args.p4;
        ret.Success.p2->values[3] = args.p5;
        return ret;
}
/*
arrayobj_create5: (SysState, Obj, Obj, Obj, Obj, Obj) -> R (SysState, Array Obj) SysState
*/
$ty:(R (SysState, Array Obj) SysState) $id:arrayobj_create5($ty:((SysState, Obj, Obj, Obj, Obj, Obj)) args)
{
        $ty:(R (SysState, Array Obj) SysState) ret = arrayobj_alloc(5);

        if (ret.tag == TAG_ENUM_Error) {
                $ty:((SysState, Obj)) fargs;

                fargs.p1 = args.p1;
                fargs.p2 = args.p2;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p3;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p4;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p5;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p6;
                $exp:deep_freeObj(fargs);
                return ret;
        }
        ret.Success.p2->values[0] = args.p2;
        ret.Success.p2->values[1] = args.p3;
        ret.Success.p2->values[2] = args.p4;
        ret.Success.p2->values[3] = args.p5;
        ret.Success.p2->values[4] = args.p6;
        return ret;
}
/*
arrayobj_create6: (SysState, Obj, Obj, Obj, Obj, Obj, Obj) -> R (SysState, Array Obj) SysState
*/
$ty:(R (SysState, Array Obj) SysState) $id:arrayobj_create6($ty:((SysState, Obj, Obj, Obj, Obj, Obj, Obj)) args)
{
        $ty:(R (SysState, Array Obj) SysState) ret = arrayobj_alloc(6);

        if (ret.tag == TAG_ENUM_Error) {
                $ty:((SysState, Obj)) fargs;

                fargs.p1 = args.p1;
                fargs.p2 = args.p2;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p3;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p4;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p5;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p6;
                $exp:deep_freeObj(fargs);
                fargs.p2 = args.p7;
                $exp:deep_freeObj(fargs);
                return ret;
        }
        ret.Success.p2->values[0] = args.p2;
        ret.Success.p2->values[1] = args.p3;
        ret.Success.p2->values[2] = args.p4;
        ret.Success.p2->values[3] = args.p5;
        ret.Success.p2->values[4] = args.p6;
        ret.Success.p2->values[5] = args.p7;
        return ret;
}

