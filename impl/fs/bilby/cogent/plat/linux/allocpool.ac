/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$esc:(#include <lib/allocpool.h>)

$ty:(R (SysState, AllocPool a) SysState) $id:allocpool_create($ty:(SysState) args)
{
    $ty:(R (SysState, AllocPool a) SysState) ret;
    $ty:(AllocPool a) apool = kzalloc(sizeof(*apool));
    
    if (!apool) {
        ret.tag = TAG_ENUM_Error;
        ret.Error = args;
        return ret;
    }
    ret.tag = TAG_ENUM_Success;
    ret.Success.p1 = args;
    ret.Success.p2 = apool;
    return ret;
}

$ty:(SysState) $id:allocpool_free($ty:((SysState, AllocPool a)) args)
{
    kfree(args.p2->pool);
    kfree(args.p2);
    return args.p1;
}

$ty:((SysState, AllocPool a)) $id:allocpool_clean($ty:((SysState, AllocPool a)) args)
{
    $ty:(AllocPool a) apool = args.p2;
    int i;

    for (i = 0; i < apool->len; i++) {
        if (apool->pool[i])
            kmem_cache_free(node_slab, apool->pool[i]);
        apool->pool[i] = NULL;
    }
    apool->i = 0;
    return args;
}

$ty:(RR (SysState, AllocPool a) () ()) $id:allocpool_prealloc($ty:(AllocPoolPreallocP a) args)
{
    $ty:(RR (SysState, AllocPool a) () ())  ret;
    $ty:(AllocPool a) apool = args.pool;
    int i;

    ret.p1.p1 = args.ex;
    ret.p1.p2 = apool;
    if (apool->len < args.nb) {
            apool->len  = args.nb;
            apool->pool = krealloc(apool->pool, sizeof(void *) * args.nb);
    }
    if (apool->pool) {
            memset(apool->pool, 0, sizeof(void *) * apool->len);
            apool->i = 0;
            for (i = 0; i < apool->len; i++) {
                    apool->pool[i] = kmem_cache_alloc(node_slab, GFP_NOFS);
                    if (!apool->pool[i]) {
                            $ty:((SysState, AllocPool a)) fargs;
                            fargs.p1 = args.ex;
                            fargs.p2 = apool;
                            $exp:(allocpool_clean[a])(fargs);
                            ret.p2.tag = TAG_ENUM_Error;
                            return ret;
                    }
            }
            ret.p2.tag = TAG_ENUM_Success;
            return ret;
    }
    ret.p2.tag = TAG_ENUM_Error;
    return ret;
}

$ty:((AllocPool a, acc)) $id:allocpool_use($ty:(AllocPoolUseP a acc obsv) args)
{
    $ty:((AllocPool a, acc)) ret;
    $ty:(AllocPool a) apool = args.pool;
    $ty:(ElemAO a acc obsv) fargs;

    ret.p1 = apool;
    for (; apool->i < apool->len; apool->i++) {
        if (apool->pool[apool->i]) {
            fargs.elem = apool->pool[apool->i];
            fargs.acc = args.acc;
            fargs.obsv = args.obsv;
            apool->pool[apool->i++] = NULL;
            ret.p2 = (($spec:(AllocPoolUseF a acc obsv)) args.f)(fargs);
            return ret;
        }
    }
    ret.p2 = args.acc;
    return ret;
}

