
$ty:(CStr!) cstring_to_cstr ($ty:(CString!) args)
{
    return args->values;
}

$ty:(Bool) wordarray_str_cmp ($ty:((CString!, CStr!)) args)
{
    int res = strncmp (args.p1->values, args.p2, args.p1->len - 1);
    if (!res) {
        return $exp:(True);  // equal
    } else {
        return $exp:(False);
    }
}

char* get_ObjDentry_name_bang_str ($ty:(ObjDentry) args)
{
    return args->name;
}

$ty:(CString!) get_ObjDentry_name_bang ($ty:(ObjDentry!) args)
{
    $ty:(CString!) ret = kmalloc (sizeof (*ret));
    char* val = kmalloc (args->nlen + 1);
    if (!ret || !val) {
        bilbyfs_debug ("get_ObjDentry_name_bang failed to malloc!");
        return NULL;
    }
    ret->len = args->nlen;
    ret->values = val;
    memcpy(val, args->name, args->nlen);
    val[args->nlen] = '\0';
    return ret;
}

$ty:((ObjDentry take (..)) put (name))
set_ObjDentry_name ($ty:((ObjDentry take (..), CString!)) args)
{
    $ty:(ObjDentry) dent = args.p1;
    memcpy((void*)dent->name, (void*)args.p2->values, args.p2->len - 1);
    return dent;
}

$ty:((Buffer, BufOffs)) serialise_ObjData_data ($ty:((Buffer, BufOffs, ObjData!)) args)
{
    $ty:((Buffer, BufOffs)) ret;
    memcpy (args.p1->data + args.p2, args.p3->odata, args.p3->size);
    ret.p1 = args.p1;
    ret.p2 = args.p2 + args.p3->size + $exp:(bilbyFsObjDataHeaderSize);
    return ret;
}

$ty:(ObjData) deserialise_ObjData_data ($ty:(((ObjData take (..)) put padding, Buffer!, BufOffs, U32)) args)
{
    memcpy (args.p1->odata, args.p2->data + args.p3, args.p4);
    return args.p1;
}


$ty:(ObjData) set_ObjData_odata ($ty:((ObjData take odata, CString!)) args)
{
    $ty:(ObjData) odata = args.p1;
    $ty:(U32) len = args.p2->len;
    memcpy (odata->odata, args.p2->values, len);
    return odata;
}


$ty:(ObjData) set_ObjData_odata_buf ($ty:((ObjData take odata, Buffer!, BufOffs)) args)
{
    $ty:(ObjData) odata = args.p1;
    memcpy (odata->odata, args.p2->data, args.p3);
    return odata;
}
